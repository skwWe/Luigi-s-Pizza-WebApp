@page "/"
@page "/register"
@using AuthServiceTool
@using Models
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Supabase.Client SupabaseClient


<EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
<div class="page-container">
    <div class="left-panel">
        <div class="form-container">
            <h1 style="margin-bottom: 20px;">Регистрация</h1>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }

            <div class="form-group">
                <label>Email</label>
                <input type="text" class="input" placeholder="Введите email" @bind="registerModel.Email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group">
                <label>Пароль</label>
                <input type="password" class="input" placeholder="Введите пароль" @bind="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group">
                <label>Подтвердить пароль</label>
                <input type="password" class="input" placeholder="Подтвердите пароль" @bind="registerModel.ConfirmPassword" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <div class="form-group">
                <label>Имя</label>
                <input type="text" class="input" placeholder="Введите имя" @bind="registerModel.FirstName" />
                <ValidationMessage For="@(() => registerModel.FirstName)" />
            </div>

            <div class="form-group">
                <label>Фамилия</label>
                <input type="text" class="input" placeholder="Введите фамилию" @bind="registerModel.LastName" />
                <ValidationMessage For="@(() => registerModel.LastName)" />
            </div>

            <div class="form-group">
                <label>Возраст</label>
                <input type="number" class="input" placeholder="Введите возраст" @bind="registerModel.Age" />
                <ValidationMessage For="@(() => registerModel.Age)" />
            </div>

            <button class="btn-register" @onclick="HandleRegistration"><strong>Зарегистрироваться</strong></button>

            <p class="login-link">Есть аккаунт? <a href="/login">Войти</a></p>

           
        </div>
    </div>

    <div class="right-panel">
        <img src="images/luigi-logo.png" alt="Luigi's Logo" class="logo" />
        <p class="description">Приложение для сотрудников</p>
        <p class="thanks">Спасибо что вы с нами!</p>
    </div>
</div>
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string? errorMessage;

    private async Task HandleRegistration()
    {
        errorMessage = null;

        try
        {
            var response = await AuthService.RegisterAsync(registerModel.Email, registerModel.Password);

            if (response?.User != null)
            {
                var profile = new UserProfile
                    {
                        UserId = response.User.Id,
                        FirstName = registerModel.FirstName,
                        LastName = registerModel.LastName,
                        Age = registerModel.Age,
                        Email = registerModel.Email
                    };

                var insertResult = await SupabaseClient
                    .From<UserProfile>()
                    .Insert(profile);

                if (insertResult.Models.Any())
                {
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    errorMessage = "Ошибка при сохранении данных профиля.";
                }
                if (registerModel.Password.Length < 6)
                {
                    errorMessage = "Пароль должен содержать минимум 6 символов.";
                    return;
                }
            }
            else
            {
                errorMessage = "Не удалось зарегистрировать пользователя. Возможно, email уже используется.";
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("user_already_exists"))
            {
                errorMessage = "Пользователь с таким email уже зарегистрирован.";
            }
            else
            {
                errorMessage = $"Ошибка: {ex.Message}";
            }
        }
    }
}