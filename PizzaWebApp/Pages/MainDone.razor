@page "/main-done"
@using PizzaWebApp.Models
@inject NavigationManager Navigation
@inject Supabase.Client Supabase

<link href="https://fonts.googleapis.com/css2?family=Montserrat&display=swap" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat&family=Playfair+Display:ital@1&display=swap" rel="stylesheet" />

<link href="css/main.css" rel="stylesheet" />


<header class="main-header">
    <button class="login-btn">Мой профиль</button>
</header>

<div class="top-bar">
    <div class="top-left">

        <img src="/images/logo.png" alt="Logo" class="logo-img" />

        <span class="app-name">Luigi’s Pizza</span>
    </div>
    <div class="top-right">
        <button class="nav-btn" @onclick='() => Navigation.NavigateTo("/main-new")'>Новые</button>
        <button class="nav-btn" @onclick='() => Navigation.NavigateTo("/main-now")'>Текущие</button>
        <button class="nav-btn active" style="background-color: #DBDFD0;" @onclick='() => Navigation.NavigateTo("/main-done")'>Выполненные</button>

    </div>
</div>

<h2 class="section-title">Завершённые заказы</h2>

@if (orders == null)
{
    <p class="status-message">Загрузка...</p>
}
else if (!orders.Any())
{
    <p class="status-message">Завершённых заказов нет 😔</p>
}
else
{
    <div class="orders-container">
        <div class="orders-grid">
            @foreach (var order in orders)
            {
                <OrderCard Order="order" ShowActionButton="false" />
            }
        </div>
    </div>
}

<footer class="footer">
    <div class="footer-left">
        <img src="images/logo-circle.png" alt="Luigi's Pizza" />
        <span>Luigi’s Pizza</span>
    </div>
    <div class="footer-right">@DateTime.Now.ToString("HH:mm")</div>
</footer>

@code {
    private List<OrderDetailView> orders;


    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        var response = await Supabase
            .From<OrderDetailView>()
            .Where(x => x.Status == "Готово")
            .Get();

        orders = response.Models;
    }
   
}

@code {
    private DateTime currentTime = DateTime.Now;
    private Timer? timer;

    protected override void OnInitialized()
    {
        timer = new Timer(UpdateTime, null, 0, 1000);
    }

    private void UpdateTime(object? state)
    {
        currentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
