@page "/main-now"
@using PizzaWebApp.Models
@inject NavigationManager Navigation
@inject Supabase.Client Supabase

<link href="https://fonts.googleapis.com/css2?family=Montserrat&display=swap" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat&family=Playfair+Display:ital@1&display=swap" rel="stylesheet" />

<link href="css/main.css" rel="stylesheet" />
<link href="css/profil.css" rel="stylesheet" />

<div class="page-container">
    <header class="main-header">
        <button class="login-btn" @onclick="ToggleProfileSidebar">Мой профиль</button>
    </header>

    <div class="top-bar">
        <div class="top-left">
            <img src="/images/logo.png" alt="Logo" class="logo-img" />
            <span class="app-name">Luigi’s Pizza</span>
        </div>
        <div class="top-right">
            <button class="nav-btn" @onclick='() => Navigation.NavigateTo("/main-new")'>Новые</button>
            <button class="nav-btn active" style="background-color: #DBDFD0;" @onclick='() => Navigation.NavigateTo("/main-now")'>Текущие</button>
            <button class="nav-btn" @onclick='() => Navigation.NavigateTo("/main-done")'>Выполненные</button>
        </div>
    </div>

    <div class="content-wrap">
        <h2 class="section-title">Текущие заказы</h2>

        @if (orders == null)
        {
            <div class="status-container">
                <p class="status-message">Загрузка...</p>
            </div>
        }
        else if (!orders.Any())
        {
            <div class="status-container">
                <img src="images/bowser-sad.png" alt="Нет заказов" class="status-image" />
                <p class="status-message">Нет текущих заказов</p>
            </div>
        }
        else
        {
            <div class="orders-container">
                <div class="orders-grid">
                    @foreach (var order in orders)
                    {
                        <div class="order-card">
                            <div class="order-time">@order.OrderTime.ToString("HH:mm")</div>
                            <div class="order-content">
                                <h3>Заказ @order.ShortId</h3>
                               @foreach (var pizza in order.Pizzas)
                                {
                                    <div class="pizza-item">
                                        <p>@pizza.PizzaName x(@pizza.Quantity)</p>
                                        <p><b>Состав:</b> @string.Join(", ", pizza.Ingredients)</p>
                                        @if (pizza.Toppings?.Count > 0)
                                        { 
                                            <p><b>Допы:</b> @string.Join(", ", pizza.Toppings)</p>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(pizza.Comment))
                                        {
                                            <p><b>Комментарий:</b> <i>@pizza.Comment</i></p>
                                        }
                                        <hr />
                                    </div>
                                }
                            </div>
                            <div class="btn-container">
                                <button class="ready-btn" @onclick="() => CompleteOrderAsync(order)">Готово</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <ProfileSidebar IsOpen="@isProfileSidebarOpen" />
    @if (isProfileSidebarOpen)
    {
        <div class="sidebar-overlay" @onclick="CloseProfileSidebar"></div>
    }

    <footer class="footer">
        <div class="footer-left">
            <img src="images/logo-circle.png" alt="Luigi's Pizza" />
            <span>Luigi’s Pizza</span>
        </div>
        <div class="footer-right">@currentTime.ToString("HH:mm")</div>
    </footer>
</div>

@code {
    private bool isProfileSidebarOpen = false;

    private void ToggleProfileSidebar()
    {
        isProfileSidebarOpen = !isProfileSidebarOpen;
    }

    private void CloseProfileSidebar()
    {
        isProfileSidebarOpen = false;
    }

    private List<OrderWithPizzas> orders;

    private DateTime currentTime = DateTime.Now;
    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();

        timer = new Timer(UpdateTime, null, 0, 1000);
    }

    private async Task LoadOrdersAsync()
    {
        var response = await Supabase
            .From<OrderDetailView>()
            .Where(x => x.Status == "Готовится")
            .Get();

        var details = response.Models;

        orders = GroupOrders(details);
    }

    private List<OrderWithPizzas> GroupOrders(List<OrderDetailView> details)
    {
        var groupedOrders = details
            .GroupBy(d => d.OrderId)
            .Select(g => new OrderWithPizzas
                {
                    OrderId = g.Key,
                    ShortId = g.First().ShortId,
                    OrderTime = g.First().OrderTime,
                    Status = g.First().Status,
                    Pizzas = g.Select(p => new PizzaInOrder
                    {
                        PizzaName = p.PizzaName,
                        Ingredients = p.Ingredients ?? new List<string>(),
                        Toppings = p.Toppings ?? new List<string>(),
                        Comment = p.Comment,
                        Quantity = p.Quantity
                    }).ToList()
                }).ToList();

        return groupedOrders;
    }

    private async Task CompleteOrderAsync(OrderWithPizzas order)
    {
        await Supabase
            .From<Order>()
            .Where(x => x.OrderId == order.OrderId)
            .Set(x => x.Status, "Готово")
            .Update();

        await LoadOrdersAsync();
    }

    private void UpdateTime(object? state)
    {
        currentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}

